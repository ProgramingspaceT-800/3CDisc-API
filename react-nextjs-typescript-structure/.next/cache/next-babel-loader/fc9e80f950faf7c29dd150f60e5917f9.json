{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\nvar _inherits = require(\"@babel/runtime/helpers/inherits\");\nvar _possibleConstructorReturn = require(\"@babel/runtime/helpers/possibleConstructorReturn\");\nvar _getPrototypeOf = require(\"@babel/runtime/helpers/getPrototypeOf\");\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nvar _interopRequireWildcard3 = require(\"@babel/runtime/helpers/interopRequireWildcard\");\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nexports.__esModule = true;\nexports.render = render;\nexports.renderError = renderError;\nexports[\"default\"] = exports.emitter = exports.router = exports.version = void 0;\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\nvar _interopRequireWildcard2 = _interopRequireDefault(require(\"@babel/runtime/helpers/interopRequireWildcard\"));\nvar _router = require(\"next/router\");\nvar querystring = _interopRequireWildcard3(require(\"../next-server/lib/router/utils/querystring\"));\nvar _react = _interopRequireDefault(require(\"react\"));\nvar _reactDom = _interopRequireDefault(require(\"react-dom\"));\nvar _headManagerContext = require(\"../next-server/lib/head-manager-context\");\nvar _mitt = _interopRequireDefault(require(\"../next-server/lib/mitt\"));\nvar _routerContext = require(\"../next-server/lib/router-context\");\nvar _isDynamic = require(\"../next-server/lib/router/utils/is-dynamic\");\nvar envConfig = _interopRequireWildcard3(require(\"../next-server/lib/runtime-config\"));\nvar _utils = require(\"../next-server/lib/utils\");\nvar _router2 = require(\"../next-server/lib/router/router\");\nvar _headManager = _interopRequireDefault(require(\"./head-manager\"));\nvar _pageLoader = _interopRequireDefault(require(\"./page-loader\"));\nvar _performanceRelayer = _interopRequireDefault(require(\"./performance-relayer\")); /* global location */ /// <reference types=\"react-dom/experimental\" />\nif (!('finally' in Promise.prototype)) {\n  // eslint-disable-next-line no-extend-native\n  Promise.prototype[\"finally\"] = require('next/dist/build/polyfills/finally-polyfill.min');\n}\nvar data = JSON.parse(document.getElementById('__NEXT_DATA__').textContent);\nwindow.__NEXT_DATA__ = data;\nvar version = \"9.5.2\";\nexports.version = version;\nvar hydrateProps = data.props,\n  hydrateErr = data.err,\n  page = data.page,\n  query = data.query,\n  buildId = data.buildId,\n  assetPrefix = data.assetPrefix,\n  runtimeConfig = data.runtimeConfig,\n  dynamicIds = data.dynamicIds,\n  isFallback = data.isFallback;\nvar prefix = assetPrefix || ''; // With dynamic assetPrefix it's no longer possible to set assetPrefix at the build time\n// So, this is how we do it in the client side at runtime\n__webpack_public_path__ = \"\".concat(prefix, \"/_next/\"); //eslint-disable-line\n// Initialize next/config with the environment configuration\nenvConfig.setConfig({\n  serverRuntimeConfig: {},\n  publicRuntimeConfig: runtimeConfig || {}\n});\nvar asPath = (0, _utils.getURL)(); // make sure not to attempt stripping basePath for 404s\nif ((0, _router2.hasBasePath)(asPath)) {\n  asPath = (0, _router2.delBasePath)(asPath);\n}\nvar pageLoader = new _pageLoader[\"default\"](buildId, prefix, page);\nvar register = function register(_ref) {\n  var _ref2 = _slicedToArray(_ref, 2),\n    r = _ref2[0],\n    f = _ref2[1];\n  return pageLoader.registerPage(r, f);\n};\nif (window.__NEXT_P) {\n  // Defer page registration for another tick. This will increase the overall\n  // latency in hydrating the page, but reduce the total blocking time.\n  window.__NEXT_P.map(function (p) {\n    return setTimeout(function () {\n      return register(p);\n    }, 0);\n  });\n}\nwindow.__NEXT_P = [];\nwindow.__NEXT_P.push = register;\nvar headManager = (0, _headManager[\"default\"])();\nvar appElement = document.getElementById('__next');\nvar lastAppProps;\nvar _lastRenderReject;\nvar webpackHMR;\nvar router;\nexports.router = router;\nvar CachedComponent;\nvar CachedApp, onPerfEntry;\nvar Container = /*#__PURE__*/function (_react$default$Compon) {\n  _inherits(Container, _react$default$Compon);\n  var _super = _createSuper(Container);\n  function Container() {\n    _classCallCheck(this, Container);\n    return _super.apply(this, arguments);\n  }\n  _createClass(Container, [{\n    key: \"componentDidCatch\",\n    value: function componentDidCatch(componentErr, info) {\n      this.props.fn(componentErr, info);\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.scrollToHash(); // We need to replace the router state if:\n      // - the page was (auto) exported and has a query string or search (hash)\n      // - it was auto exported and is a dynamic route (to provide params)\n      // - if it is a client-side skeleton (fallback render)\n      if (router.isSsr && (isFallback || data.nextExport && ((0, _isDynamic.isDynamicRoute)(router.pathname) || location.search) || hydrateProps && hydrateProps.__N_SSG && location.search)) {\n        // update query on mount for exported pages\n        router.replace(router.pathname + '?' + String(querystring.assign(querystring.urlQueryToSearchParams(router.query), new URLSearchParams(location.search))), asPath, {\n          // WARNING: `_h` is an internal option for handing Next.js\n          // client-side hydration. Your app should _never_ use this property.\n          // It may change at any time without notice.\n          _h: 1,\n          // Fallback pages must trigger the data fetch, so the transition is\n          // not shallow.\n          // Other pages (strictly updating query) happens shallowly, as data\n          // requirements would already be present.\n          shallow: !isFallback\n        });\n      }\n      if (process.env.__NEXT_TEST_MODE) {\n        window.__NEXT_HYDRATED = true;\n        if (window.__NEXT_HYDRATED_CB) {\n          window.__NEXT_HYDRATED_CB();\n        }\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      this.scrollToHash();\n    }\n  }, {\n    key: \"scrollToHash\",\n    value: function scrollToHash() {\n      var _location = location,\n        hash = _location.hash;\n      hash = hash && hash.substring(1);\n      if (!hash) return;\n      var el = document.getElementById(hash);\n      if (!el) return; // If we call scrollIntoView() in here without a setTimeout\n      // it won't scroll properly.\n      setTimeout(function () {\n        return el.scrollIntoView();\n      }, 0);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (true) {\n        return this.props.children;\n      }\n      if (false) {\n        var _require = require('@next/react-dev-overlay/lib/client'),\n          ReactDevOverlay = _require.ReactDevOverlay;\n        return /*#__PURE__*/_react[\"default\"].createElement(ReactDevOverlay, null, this.props.children);\n      }\n    }\n  }]);\n  return Container;\n}(_react[\"default\"].Component);\nvar emitter = (0, _mitt[\"default\"])();\nexports.emitter = emitter;\nvar _default = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var _ref4,\n      passedWebpackHMR,\n      _yield$pageLoader$loa,\n      app,\n      mod,\n      initialErr,\n      _yield$pageLoader$loa2,\n      _require2,\n      isValidElementType,\n      _require3,\n      getNodeError,\n      renderCtx,\n      _args = arguments;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _ref4 = _args.length > 0 && _args[0] !== undefined ? _args[0] : {}, passedWebpackHMR = _ref4.webpackHMR;\n            // This makes sure this specific lines are removed in production\n            if (false) {\n              webpackHMR = passedWebpackHMR;\n            }\n            _context.next = 4;\n            return pageLoader.loadPage('/_app');\n          case 4:\n            _yield$pageLoader$loa = _context.sent;\n            app = _yield$pageLoader$loa.page;\n            mod = _yield$pageLoader$loa.mod;\n            CachedApp = app;\n            if (mod && mod.reportWebVitals) {\n              onPerfEntry = function onPerfEntry(_ref5) {\n                var id = _ref5.id,\n                  name = _ref5.name,\n                  startTime = _ref5.startTime,\n                  value = _ref5.value,\n                  duration = _ref5.duration,\n                  entryType = _ref5.entryType,\n                  entries = _ref5.entries;\n                // Combines timestamp with random number for unique ID\n                var uniqueID = \"\".concat(Date.now(), \"-\").concat(Math.floor(Math.random() * (9e12 - 1)) + 1e12);\n                var perfStartEntry;\n                if (entries && entries.length) {\n                  perfStartEntry = entries[0].startTime;\n                }\n                mod.reportWebVitals({\n                  id: id || uniqueID,\n                  name: name,\n                  startTime: startTime || perfStartEntry,\n                  value: value == null ? duration : value,\n                  label: entryType === 'mark' || entryType === 'measure' ? 'custom' : 'web-vital'\n                });\n              };\n            }\n            initialErr = hydrateErr;\n            _context.prev = 10;\n            ;\n            _context.next = 14;\n            return pageLoader.loadPage(page);\n          case 14:\n            _yield$pageLoader$loa2 = _context.sent;\n            CachedComponent = _yield$pageLoader$loa2.page;\n            if (!false) {\n              _context.next = 20;\n              break;\n            }\n            _require2 = require('react-is'), isValidElementType = _require2.isValidElementType;\n            if (isValidElementType(CachedComponent)) {\n              _context.next = 20;\n              break;\n            }\n            throw new Error(\"The default export is not a React Component in page: \\\"\".concat(page, \"\\\"\"));\n          case 20:\n            _context.next = 25;\n            break;\n          case 22:\n            _context.prev = 22;\n            _context.t0 = _context[\"catch\"](10);\n            // This catches errors like throwing in the top level of a module\n            initialErr = _context.t0;\n          case 25:\n            if (false) {\n              _require3 = require('@next/react-dev-overlay/lib/client'), getNodeError = _require3.getNodeError; // Server-side runtime errors need to be re-thrown on the client-side so\n              // that the overlay is rendered.\n              if (initialErr) {\n                if (initialErr === hydrateErr) {\n                  setTimeout(function () {\n                    var error;\n                    try {\n                      // Generate a new error object. We `throw` it because some browsers\n                      // will set the `stack` when thrown, and we want to ensure ours is\n                      // not overridden when we re-throw it below.\n                      throw new Error(initialErr.message);\n                    } catch (e) {\n                      error = e;\n                    }\n                    error.name = initialErr.name;\n                    error.stack = initialErr.stack;\n                    var node = getNodeError(error);\n                    throw node;\n                  });\n                } // We replaced the server-side error with a client-side error, and should\n                // no longer rewrite the stack trace to a Node error.\n                else {\n                  setTimeout(function () {\n                    throw initialErr;\n                  });\n                }\n              }\n            }\n            if (!window.__NEXT_PRELOADREADY) {\n              _context.next = 29;\n              break;\n            }\n            _context.next = 29;\n            return window.__NEXT_PRELOADREADY(dynamicIds);\n          case 29:\n            exports.router = router = (0, _router.createRouter)(page, query, asPath, {\n              initialProps: hydrateProps,\n              pageLoader: pageLoader,\n              App: CachedApp,\n              Component: CachedComponent,\n              wrapApp: wrapApp,\n              err: initialErr,\n              isFallback: isFallback,\n              subscription: function subscription(_ref6, App) {\n                var Component = _ref6.Component,\n                  props = _ref6.props,\n                  err = _ref6.err;\n                return render({\n                  App: App,\n                  Component: Component,\n                  props: props,\n                  err: err\n                });\n              }\n            }); // call init-client middleware\n            if (process.env.__NEXT_PLUGINS) {\n              // eslint-disable-next-line\n              Promise.resolve().then(function () {\n                return (0, _interopRequireWildcard2[\"default\"])(require('next-plugin-loader?middleware=on-init-client!'));\n              }).then(function (initClientModule) {\n                return initClientModule[\"default\"]({\n                  router: router\n                });\n              })[\"catch\"](function (initClientErr) {\n                console.error('Error calling client-init for plugins', initClientErr);\n              });\n            }\n            renderCtx = {\n              App: CachedApp,\n              Component: CachedComponent,\n              props: hydrateProps,\n              err: initialErr\n            };\n            if (!true) {\n              _context.next = 35;\n              break;\n            }\n            render(renderCtx);\n            return _context.abrupt(\"return\", emitter);\n          case 35:\n            if (!false) {\n              _context.next = 37;\n              break;\n            }\n            return _context.abrupt(\"return\", {\n              emitter: emitter,\n              render: render,\n              renderCtx: renderCtx\n            });\n          case 37:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[10, 22]]);\n  }));\n  return function _default() {\n    return _ref3.apply(this, arguments);\n  };\n}();\nexports[\"default\"] = _default;\nfunction render(_x) {\n  return _render.apply(this, arguments);\n} // This method handles all runtime and debug errors.\n// 404 and 500 errors are special kind of errors\n// and they are still handle via the main render method.\nfunction _render() {\n  _render = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(renderingProps) {\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (!renderingProps.err) {\n              _context2.next = 4;\n              break;\n            }\n            _context2.next = 3;\n            return renderError(renderingProps);\n          case 3:\n            return _context2.abrupt(\"return\");\n          case 4:\n            _context2.prev = 4;\n            _context2.next = 7;\n            return doRender(renderingProps);\n          case 7:\n            _context2.next = 14;\n            break;\n          case 9:\n            _context2.prev = 9;\n            _context2.t0 = _context2[\"catch\"](4);\n            if (false) {\n              // Ensure this error is displayed in the overlay in development\n              setTimeout(function () {\n                throw _context2.t0;\n              });\n            }\n            _context2.next = 14;\n            return renderError((0, _extends2[\"default\"])((0, _extends2[\"default\"])({}, renderingProps), {}, {\n              err: _context2.t0\n            }));\n          case 14:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[4, 9]]);\n  }));\n  return _render.apply(this, arguments);\n}\nfunction renderError(renderErrorProps) {\n  var App = renderErrorProps.App,\n    err = renderErrorProps.err; // In development runtime errors are caught by our overlay\n  // In production we catch runtime errors using componentDidCatch which will trigger renderError\n  if (false) {\n    // A Next.js rendering runtime error is always unrecoverable\n    // FIXME: let's make this recoverable (error in GIP client-transition)\n    webpackHMR.onUnrecoverableError(); // We need to render an empty <App> so that the `<ReactDevOverlay>` can\n    // render itself.\n    return doRender({\n      App: function App() {\n        return null;\n      },\n      props: {},\n      Component: function Component() {\n        return null;\n      },\n      err: null\n    });\n  }\n  if (process.env.__NEXT_PLUGINS) {\n    // eslint-disable-next-line\n    Promise.resolve().then(function () {\n      return (0, _interopRequireWildcard2[\"default\"])(require('next-plugin-loader?middleware=on-error-client!'));\n    }).then(function (onClientErrorModule) {\n      return onClientErrorModule[\"default\"]({\n        err: err\n      });\n    })[\"catch\"](function (onClientErrorErr) {\n      console.error('error calling on-error-client for plugins', onClientErrorErr);\n    });\n  } // Make sure we log the error to the console, otherwise users can't track down issues.\n  console.error(err);\n  return pageLoader.loadPage('/_error').then(function (_ref7) {\n    var ErrorComponent = _ref7.page;\n    // In production we do a normal render with the `ErrorComponent` as component.\n    // If we've gotten here upon initial render, we can use the props from the server.\n    // Otherwise, we need to call `getInitialProps` on `App` before mounting.\n    var AppTree = wrapApp(App);\n    var appCtx = {\n      Component: ErrorComponent,\n      AppTree: AppTree,\n      router: router,\n      ctx: {\n        err: err,\n        pathname: page,\n        query: query,\n        asPath: asPath,\n        AppTree: AppTree\n      }\n    };\n    return Promise.resolve(renderErrorProps.props ? renderErrorProps.props : (0, _utils.loadGetInitialProps)(App, appCtx)).then(function (initProps) {\n      return doRender((0, _extends2[\"default\"])((0, _extends2[\"default\"])({}, renderErrorProps), {}, {\n        err: err,\n        Component: ErrorComponent,\n        props: initProps\n      }));\n    });\n  });\n} // If hydrate does not exist, eg in preact.\nvar isInitialRender = typeof _reactDom[\"default\"].hydrate === 'function';\nvar reactRoot = null;\nfunction renderReactElement(reactEl, domEl) {\n  if (process.env.__NEXT_REACT_MODE !== 'legacy') {\n    if (!reactRoot) {\n      var opts = {\n        hydrate: true\n      };\n      reactRoot = process.env.__NEXT_REACT_MODE === 'concurrent' ? _reactDom[\"default\"].unstable_createRoot(domEl, opts) : _reactDom[\"default\"].unstable_createBlockingRoot(domEl, opts);\n    }\n    reactRoot.render(reactEl);\n  } else {\n    // mark start of hydrate/render\n    if (_utils.ST) {\n      performance.mark('beforeRender');\n    } // The check for `.hydrate` is there to support React alternatives like preact\n    if (isInitialRender) {\n      _reactDom[\"default\"].hydrate(reactEl, domEl, markHydrateComplete);\n      isInitialRender = false;\n      if (onPerfEntry && _utils.ST) {\n        (0, _performanceRelayer[\"default\"])(onPerfEntry);\n      }\n    } else {\n      _reactDom[\"default\"].render(reactEl, domEl, markRenderComplete);\n    }\n  }\n}\nfunction markHydrateComplete() {\n  if (!_utils.ST) return;\n  performance.mark('afterHydrate'); // mark end of hydration\n  performance.measure('Next.js-before-hydration', 'navigationStart', 'beforeRender');\n  performance.measure('Next.js-hydration', 'beforeRender', 'afterHydrate');\n  if (onPerfEntry) {\n    performance.getEntriesByName('Next.js-hydration').forEach(onPerfEntry);\n  }\n  clearMarks();\n}\nfunction markRenderComplete() {\n  if (!_utils.ST) return;\n  performance.mark('afterRender'); // mark end of render\n  var navStartEntries = performance.getEntriesByName('routeChange', 'mark');\n  if (!navStartEntries.length) {\n    return;\n  }\n  performance.measure('Next.js-route-change-to-render', navStartEntries[0].name, 'beforeRender');\n  performance.measure('Next.js-render', 'beforeRender', 'afterRender');\n  if (onPerfEntry) {\n    performance.getEntriesByName('Next.js-render').forEach(onPerfEntry);\n    performance.getEntriesByName('Next.js-route-change-to-render').forEach(onPerfEntry);\n  }\n  clearMarks();\n  ['Next.js-route-change-to-render', 'Next.js-render'].forEach(function (measure) {\n    return performance.clearMeasures(measure);\n  });\n}\nfunction clearMarks() {\n  ;\n  ['beforeRender', 'afterHydrate', 'afterRender', 'routeChange'].forEach(function (mark) {\n    return performance.clearMarks(mark);\n  });\n}\nfunction AppContainer(_ref8) {\n  var children = _ref8.children;\n  return /*#__PURE__*/_react[\"default\"].createElement(Container, {\n    fn: function fn(error) {\n      return renderError({\n        App: CachedApp,\n        err: error\n      })[\"catch\"](function (err) {\n        return console.error('Error rendering page: ', err);\n      });\n    }\n  }, /*#__PURE__*/_react[\"default\"].createElement(_routerContext.RouterContext.Provider, {\n    value: (0, _router.makePublicRouterInstance)(router)\n  }, /*#__PURE__*/_react[\"default\"].createElement(_headManagerContext.HeadManagerContext.Provider, {\n    value: headManager\n  }, children)));\n}\nvar wrapApp = function wrapApp(App) {\n  return function (wrappedAppProps) {\n    var appProps = (0, _extends2[\"default\"])((0, _extends2[\"default\"])({}, wrappedAppProps), {}, {\n      Component: CachedComponent,\n      err: hydrateErr,\n      router: router\n    });\n    return /*#__PURE__*/_react[\"default\"].createElement(AppContainer, null, /*#__PURE__*/_react[\"default\"].createElement(App, appProps));\n  };\n};\nfunction doRender(_x2) {\n  return _doRender.apply(this, arguments);\n}\nfunction _doRender() {\n  _doRender = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(_ref9) {\n    var App, Component, props, err, appProps, resolvePromise, renderPromise, elem;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            App = _ref9.App, Component = _ref9.Component, props = _ref9.props, err = _ref9.err;\n            Component = Component || lastAppProps.Component;\n            props = props || lastAppProps.props;\n            appProps = (0, _extends2[\"default\"])((0, _extends2[\"default\"])({}, props), {}, {\n              Component: Component,\n              err: err,\n              router: router\n            }); // lastAppProps has to be set before ReactDom.render to account for ReactDom throwing an error.\n            lastAppProps = appProps;\n            renderPromise = new Promise(function (resolve, reject) {\n              if (_lastRenderReject) {\n                _lastRenderReject();\n              }\n              resolvePromise = function resolvePromise() {\n                _lastRenderReject = null;\n                resolve();\n              };\n              _lastRenderReject = function lastRenderReject() {\n                _lastRenderReject = null;\n                reject();\n              };\n            });\n            elem = /*#__PURE__*/_react[\"default\"].createElement(Root, {\n              callback: resolvePromise\n            }, /*#__PURE__*/_react[\"default\"].createElement(AppContainer, null, /*#__PURE__*/_react[\"default\"].createElement(App, appProps))); // We catch runtime errors using componentDidCatch which will trigger renderError\n            renderReactElement(process.env.__NEXT_STRICT_MODE ? /*#__PURE__*/_react[\"default\"].createElement(_react[\"default\"].StrictMode, null, elem) : elem, appElement);\n            _context3.next = 10;\n            return renderPromise;\n          case 10:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _doRender.apply(this, arguments);\n}\nfunction Root(_ref10) {\n  var callback = _ref10.callback,\n    children = _ref10.children;\n  // We use `useLayoutEffect` to guarantee the callback is executed\n  // as soon as React flushes the update.\n  _react[\"default\"].useLayoutEffect(function () {\n    return callback();\n  }, [callback]);\n  return children;\n}","map":null,"metadata":{},"sourceType":"script"}