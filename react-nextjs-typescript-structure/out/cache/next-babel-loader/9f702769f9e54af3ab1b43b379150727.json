{"ast":null,"code":"var _jsxFileName = \"/workspace/3CDisc-API/react-nextjs-typescript-structure/src/pages/grafic.tsx\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useState, useRef } from 'react';\nimport axios from 'axios';\nimport { Container, CardContent } from '../styles/pages/Home';\nimport Chart from 'chart.js/auto';\nconst Home = () => {\n  const {\n    0: bases\n  } = useState({\n    'G - FGTS': '29870',\n    'C e M - INSS PORTABILIDADE ATUALIZADA FILE': '78025',\n    'M - UNIFICADA GRUPO SP - GOV/PME/SPPREV': '80797',\n    'G - INSS PORTABILIDADE': '69098'\n    // Adicione suas bases aqui\n  });\n\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(true);\n  const {\n    0: baseData,\n    1: setBaseData\n  } = useState({});\n  const {\n    0: expandedBase,\n    1: setExpandedBase\n  } = useState(null);\n  const {\n    0: campanhasComAviso,\n    1: setCampanhasComAviso\n  } = useState([]);\n  const {\n    0: lastUpdate,\n    1: setLastUpdate\n  } = useState(new Date());\n  const chartRef = useRef(null);\n  useEffect(() => {\n    async function fetchData() {\n      try {\n        const newData = {};\n        for (const baseName in bases) {\n          const id = bases[baseName];\n          const response = await axios.get(`https://3c.fluxoti.com/api/v1/campaigns/${id}/lists?api_token=d0NLCpTnvtsY1gQu7S38RyF47fOjnHknynBjGzWxCwpXOJqXaNwWDrGqFomq`);\n          const filteredData = response.data.data.filter(post => post.weight === 1);\n          newData[id] = filteredData;\n          const temPorcentagemMaiorQue90 = filteredData.some(post => parseFloat(post.completed_percentage) > 90);\n          if (temPorcentagemMaiorQue90) {\n            campanhasComAviso.push(id);\n          }\n        }\n        setCampanhasComAviso(campanhasComAviso);\n        setBaseData(newData);\n        setLoading(false);\n        setLastUpdate(new Date());\n      } catch (error) {\n        console.error('Erro ao buscar os dados:', error);\n        setLoading(false);\n      }\n    }\n    fetchData();\n    const interval = setInterval(fetchData, 5 * 1 * 1000);\n    return () => clearInterval(interval);\n  }, [bases]);\n  useEffect(() => {\n    if (chartRef.current) {\n      const ctx = chartRef.current.getContext('2d');\n      const chartData = {\n        labels: Object.keys(bases),\n        datasets: [{\n          label: 'Porcentagem',\n          data: Object.keys(bases).map(baseName => {\n            const data = baseData[bases[baseName]];\n            if (data && data.length > 0) {\n              return parseFloat(data[0].completed_percentage);\n            }\n            return 0;\n          }),\n          backgroundColor: 'rgba(75, 192, 192, 0.2)',\n          borderColor: 'rgba(75, 192, 192, 1)',\n          borderWidth: 1\n        }]\n      };\n      new Chart(ctx, {\n        type: 'bar',\n        data: chartData,\n        options: {\n          scales: {\n            y: {\n              beginAtZero: true,\n              min: 0,\n              max: 100,\n              title: {\n                display: true,\n                text: 'Porcentagem (%)'\n              }\n            }\n          }\n        }\n      });\n    }\n  }, [bases, baseData]);\n  function renderPorcentagem(porcentagem) {\n    const porcentagemNum = parseFloat(porcentagem);\n    if (porcentagemNum === 100) {\n      const porcentagemFormatada = porcentagemNum.toFixed(0);\n      return __jsx(\"span\", {\n        className: \"porcentagem-azul\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 14\n        }\n      }, porcentagemFormatada, \"%\");\n    } else if (porcentagemNum >= 90 && porcentagemNum <= 99.99) {\n      const porcentagemFormatada = porcentagemNum.toFixed(0);\n      return __jsx(\"span\", {\n        className: \"porcentagem-vermelha\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 14\n        }\n      }, porcentagemFormatada, \"%\");\n    } else {\n      const porcentagemFormatada = porcentagemNum.toFixed(0);\n      return __jsx(\"span\", {\n        className: \"porcentagem-verde\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 14\n        }\n      }, porcentagemFormatada, \"%\");\n    }\n  }\n  function toggleDetails(id) {\n    if (expandedBase === id) {\n      setExpandedBase(null);\n    } else {\n      setExpandedBase(id);\n    }\n  }\n  return __jsx(CardContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    className: \"title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }\n  }, __jsx(\"ul\", {\n    className: \"nav-links\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 9\n    }\n  }, __jsx(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 11\n    }\n  }, __jsx(\"a\", {\n    href: \"#\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 15\n    }\n  }, \"Bases\")), __jsx(\"li\", {\n    className: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 11\n    }\n  }, __jsx(\"a\", {\n    href: \"#\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 34\n    }\n  }, \"Gr\\xE1ficos\")), __jsx(\"li\", {\n    className: \"upward\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 11\n    }\n  }, __jsx(\"a\", {\n    href: \"#\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 34\n    }\n  }, \"Servi\\xE7os\")), __jsx(\"li\", {\n    className: \"forward\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 11\n    }\n  }, __jsx(\"a\", {\n    href: \"#\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 35\n    }\n  }, \"Feedback\"))), loading ? __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 11\n    }\n  }, \"Carregando...\") : __jsx(\"div\", {\n    className: \"principalContent\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 11\n    }\n  }, Object.keys(bases).map(baseName => {\n    var _baseData$bases$baseN;\n    return __jsx(\"div\", {\n      key: baseName,\n      className: `campaign-card${expandedBase === bases[baseName] ? ' clicked' : ''}`,\n      onClick: () => toggleDetails(bases[baseName]),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 15\n      }\n    }, __jsx(\"div\", {\n      className: `base ${campanhasComAviso.includes(bases[baseName]) ? 'com-aviso' : ''}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 17\n      }\n    }, baseName), expandedBase === bases[baseName] && __jsx(\"div\", {\n      className: \"campaign-percentages\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 19\n      }\n    }, (_baseData$bases$baseN = baseData[bases[baseName]]) === null || _baseData$bases$baseN === void 0 ? void 0 : _baseData$bases$baseN.map(post => __jsx(Container, {\n      key: post.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 23\n      }\n    }, __jsx(\"div\", {\n      className: `percentage-item ${parseFloat(post.completed_percentage) > 90 ? 'com-aviso' : ''}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 25\n      }\n    }, __jsx(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 27\n      }\n    }, post.name), __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 27\n      }\n    }, post.created_at), __jsx(\"h3\", {\n      className: `porcentagem-${post.completed_percentage === '100.00' ? 'verde' : 'vermelha'}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 27\n      }\n    }, renderPorcentagem(post.completed_percentage)), __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 27\n      }\n    }, \"\\xDAltima atualiza\\xE7\\xE3o: \", lastUpdate.toLocaleTimeString()))))));\n  }))), __jsx(\"canvas\", {\n    ref: chartRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 7\n    }\n  }));\n};\nexport default Home;","map":{"version":3,"names":["React","useEffect","useState","useRef","axios","Container","CardContent","Chart","Home","bases","loading","setLoading","baseData","setBaseData","expandedBase","setExpandedBase","campanhasComAviso","setCampanhasComAviso","lastUpdate","setLastUpdate","Date","chartRef","fetchData","newData","baseName","id","response","get","filteredData","data","filter","post","weight","temPorcentagemMaiorQue90","some","parseFloat","completed_percentage","push","error","console","interval","setInterval","clearInterval","current","ctx","getContext","chartData","labels","Object","keys","datasets","label","map","length","backgroundColor","borderColor","borderWidth","type","options","scales","y","beginAtZero","min","max","title","display","text","renderPorcentagem","porcentagem","porcentagemNum","porcentagemFormatada","toFixed","__jsx","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","toggleDetails","href","_baseData$bases$baseN","key","onClick","includes","name","created_at","toLocaleTimeString","ref"],"sources":["/workspace/3CDisc-API/react-nextjs-typescript-structure/src/pages/grafic.tsx"],"sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\nimport axios from 'axios';\nimport { Container, CardContent } from '../styles/pages/Home';\nimport Chart from 'chart.js/auto';\n\nconst Home: React.FC = () => {\n  const [bases] = useState<{\n    [key: string]: string;\n  }>({\n    'G - FGTS': '29870',\n    'C e M - INSS PORTABILIDADE ATUALIZADA FILE': '78025',\n    'M - UNIFICADA GRUPO SP - GOV/PME/SPPREV': '80797',\n    'G - INSS PORTABILIDADE': '69098',\n    // Adicione suas bases aqui\n  });\n\n  const [loading, setLoading] = useState(true);\n  const [baseData, setBaseData] = useState<any>({});\n  const [expandedBase, setExpandedBase] = useState<string | null>(null);\n  const [campanhasComAviso, setCampanhasComAviso] = useState<string[]>([]);\n  const [lastUpdate, setLastUpdate] = useState(new Date());\n\n  const chartRef = useRef<HTMLCanvasElement | null>(null);\n\n  useEffect(() => {\n    async function fetchData() {\n      try {\n        const newData: { [key: string]: any } = {};\n\n        for (const baseName in bases) {\n          const id = bases[baseName];\n          const response = await axios.get(`https://3c.fluxoti.com/api/v1/campaigns/${id}/lists?api_token=d0NLCpTnvtsY1gQu7S38RyF47fOjnHknynBjGzWxCwpXOJqXaNwWDrGqFomq`);\n          const filteredData = response.data.data.filter((post: any) => post.weight === 1);\n          newData[id] = filteredData;\n\n          const temPorcentagemMaiorQue90 = filteredData.some((post: any) => parseFloat(post.completed_percentage) > 90);\n          if (temPorcentagemMaiorQue90) {\n            campanhasComAviso.push(id);\n          }\n        }\n\n        setCampanhasComAviso(campanhasComAviso);\n        setBaseData(newData);\n        setLoading(false);\n        setLastUpdate(new Date());\n      } catch (error) {\n        console.error('Erro ao buscar os dados:', error);\n        setLoading(false);\n      }\n    }\n\n    fetchData();\n    const interval = setInterval(fetchData, 5 * 1 * 1000);\n\n    return () => clearInterval(interval);\n  }, [bases]);\n\n  useEffect(() => {\n    if (chartRef.current) {\n      const ctx = chartRef.current.getContext('2d');\n      const chartData = {\n        labels: Object.keys(bases),\n        datasets: [\n          {\n            label: 'Porcentagem',\n            data: Object.keys(bases).map((baseName) => {\n              const data = baseData[bases[baseName]];\n              if (data && data.length > 0) {\n                return parseFloat(data[0].completed_percentage);\n              }\n              return 0;\n            }),\n            backgroundColor: 'rgba(75, 192, 192, 0.2)',\n            borderColor: 'rgba(75, 192, 192, 1)',\n            borderWidth: 1,\n          },\n        ],\n      };\n\n      new Chart(ctx, {\n        type: 'bar',\n        data: chartData,\n        options: {\n          scales: {\n            y: {\n              beginAtZero: true,\n              min: 0,\n              max: 100,\n              title: {\n                display: true,\n                text: 'Porcentagem (%)',\n              },\n            },\n          },\n        },\n      });\n    }\n  }, [bases, baseData]);\n\n  function renderPorcentagem(porcentagem: string) {\n    const porcentagemNum = parseFloat(porcentagem);\n\n    if (porcentagemNum === 100) {\n      const porcentagemFormatada = porcentagemNum.toFixed(0);\n      return <span className=\"porcentagem-azul\">{porcentagemFormatada}%</span>;\n    } else if (porcentagemNum >= 90 && porcentagemNum <= 99.99) {\n      const porcentagemFormatada = porcentagemNum.toFixed(0);\n      return <span className=\"porcentagem-vermelha\">{porcentagemFormatada}%</span>;\n    } else {\n      const porcentagemFormatada = porcentagemNum.toFixed(0);\n      return <span className=\"porcentagem-verde\">{porcentagemFormatada}%</span>;\n    }\n  }\n\n  function toggleDetails(id: string) {\n    if (expandedBase === id) {\n      setExpandedBase(null);\n    } else {\n      setExpandedBase(id);\n    }\n  }\n\n  return (\n    <CardContent>\n      <div className='title'>\n        <ul className=\"nav-links\">\n          <li><a href=\"#\">Bases</a></li>\n          <li className=\"center\"><a href=\"#\">Gráficos</a></li>\n          <li className=\"upward\"><a href=\"#\">Serviços</a></li>\n          <li className=\"forward\"><a href=\"#\">Feedback</a></li>\n        </ul>\n        {loading ? (\n          <p>Carregando...</p>\n        ) : (\n          <div className='principalContent'>\n            {Object.keys(bases).map((baseName) => (\n              <div\n                key={baseName}\n                className={`campaign-card${expandedBase === bases[baseName] ? ' clicked' : ''}`}\n                onClick={() => toggleDetails(bases[baseName])}\n              >\n                <div className={`base ${campanhasComAviso.includes(bases[baseName]) ? 'com-aviso' : ''}`}>{baseName}</div>\n                {expandedBase === bases[baseName] && (\n                  <div className=\"campaign-percentages\">\n                    {baseData[bases[baseName]]?.map((post: any) => (\n                      <Container key={post.id}>\n                        <div\n                          className={`percentage-item ${parseFloat(post.completed_percentage) > 90\n                              ? 'com-aviso'\n                              : ''\n                            }`}\n                        >\n                          <h3>{post.name}</h3>\n                          <p>{post.created_at}</p>\n                          <h3 className={`porcentagem-${post.completed_percentage === '100.00' ? 'verde' : 'vermelha'}`}>\n                            {renderPorcentagem(post.completed_percentage)}\n                          </h3>\n                          <p>Última atualização: {lastUpdate.toLocaleTimeString()}</p>\n                        </div>\n                      </Container>\n                    ))}\n                  </div>\n                )}\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n      <canvas ref={chartRef}></canvas>\n    </CardContent>\n  );\n};\n\nexport default Home;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}